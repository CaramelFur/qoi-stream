#include <stdio.h>
#include <stdint.h>
#include <string.h>
#include <time.h>

#include "qoi-stream.h"
#define QOI_IMPLEMENTATION
#include "qoi.h"

int main()
{
  uint8_t *buffer;
  size_t size = 200000000;
  size_t pos = 0;

  {
    buffer = malloc(size);
    if (buffer == NULL)
    {
      printf("Failed to allocate memory\n");
      return 1;
    }
  }

  { // Read "./rgba_image.qoi" into memory
    FILE *fp = fopen("../img.qoi", "rb");
    if (fp == NULL)
    {
      printf("Failed to open file\n");
      return 1;
    }

    size_t file_size = 0;
    {
      fseek(fp, 0, SEEK_END);
      file_size = ftell(fp);
      fseek(fp, 0, SEEK_SET);
    }

    size_t read = fread(buffer, 1, file_size, fp);
    if (read != file_size)
    {
      printf("Failed to read file\n");
      return 1;
    }

    fclose(fp);
  }

  uint8_t *buffer2;
  size_t size2 = 1000000000;
  size_t pos2 = 0;

  {
    buffer2 = malloc(size2);
    if (buffer2 == NULL)
    {
      printf("Failed to allocate memory\n");
      return 1;
    }
  }

  // Get time before decoding
  clock_t start = clock();
  for (int i = 0; i < 1; i++)
  {
    pos = 0;
    pos2 = 0;

    // printf("Iteration %d\n", i);

    qois_dec_state state;
    qois_dec_state_init(&state);

    for (size_t i = 0; i < size; i++)
    {
      int result = qois_decode_byte(&state, buffer[i], buffer2 + pos2, size2 - pos2);
      if (result < 0)
      {
        printf("Failed to decode byte\n");
        return 1;
      }

      pos2 += result;
    }

    qois_enc_state state2;
    qois_enc_state_init(&state2, state.desc.width, state.desc.height, state.desc.channels, state.desc.colorspace);

    for (size_t i = 0; i < pos2; i++)
    {
      int result = qois_encode_byte(&state2, buffer2[i], buffer + pos, size - pos);
      if (result < 0)
      {
        printf("Failed to encode byte\n");
        return 1;
      }

      pos += result;
    }
  }
  // Get time after decoding
  clock_t end = clock();

  // Calculate time difference
  double time_taken = ((double)(end - start)) / CLOCKS_PER_SEC;

  printf("Time taken: %f\n", time_taken);

  start = clock();
  for (int i = 0; i < 100; i++)
  {
    pos = 0;
    pos2 = 0;

    // printf("Iteration %d\n", i);

    qoi_desc desc;
    uint8_t *pixels = qoi_decode(buffer, 912, &desc, 0);
    if (pixels == NULL)
    {
      printf("Failed to decode\n");
      return 1;
    }

    int out_length = 0;
    uint8_t* out_bytes = qoi_encode(pixels, &desc, &out_length);

    if (out_bytes == NULL)
    {
      printf("Failed to encode\n");
      return 1;
    }

    free(pixels);
    free(out_bytes);
  }

  end = clock();

  time_taken = ((double)(end - start)) / CLOCKS_PER_SEC;

  printf("Time taken: %f\n", time_taken);

  printf("Decoded %zu bytes\n", pos2);
}